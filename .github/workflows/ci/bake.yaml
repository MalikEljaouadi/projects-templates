---
# Use to bake assets for a deployment, like:
#
# - build & publish artifacts (container)
# - update chart's `values_image.yaml` file with the info provided
#
# The how those actions are done is defined by the inputs `runCmd` executed into
# the per repo devcontainer.
# Currently only devcontainer defined with a `.devcontainer/Dockerfile` is supported.
# By default `runCmd` call a per repo script named `devops/publish-package.py`.
#
# The workflow take care to commit & push the updated value files, and to optionally
# tag with `cluster/${EKS_CLUSTER_BASENAME}-dev`
# (eg to trigger a deployment by workflow or by gitops agent)
#
name: _bake

on:
  workflow_call:
    inputs:
      APP_NAME:
        description: "name of the app, use as basename for the container image"
        type: string
        required: true
      APP_VERSION:
        description: "the version to use, by default infer from `git describe --always --dirty`"
        type: string
      APP_TARGET_VALUES:
        description: |
          List of tuple (app target, values path) where app target is the dockerfile target to build and values path
          is the `values.yaml` to update.
        default: "[('ms', 'devops/chart-ms/values.yaml')]"
        type: string
      AWS_ACCOUNT_ID:
        type: string
        required: true
      AWS_DEFAULT_REGION:
        description: "AWS region where to push the container"
        type: string
        default: "eu-central-1"
      AWS_S3_CACHE_BUCKET:
        description: "AWS bucket to cache build artifacts"
        type: string
        default: "wefox-ai-wai-oci-cache-dev"
      AWS_TOKEN_TTL:
        description: "AWS token time to live in seconds"
        type: number
        default: 1200
      DEVCONTAINER:
        description: |
          full name of the devcontainer image, used to both run the job workflow
          and pass as environment variable to allow build image to use it as base image
        type: string
        required: true
      EKS_CLUSTER_BASENAME:
        type: string
        default: "ai"
      OCI_PUSH_OPTIONS:
        type: string
        default: "compression=zstd,compression-level=10,force-compression=true"
      TAG_FOR_DEPLOY_TO_DEV:
        description: "git tagging with `cluster/...` after update of `values.yaml`"
        type: boolean
        default: false
      USE_LFS:
        type: boolean
        default: false
      runCmd:
        description: "the run command to execute as 'bake' inside the devcontainer"
        type: string
        default: |
          # see https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#get-repository-content
          curl --fail-with-body -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.raw" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -sSL "https://api.github.com/repos/uberforcede/wefox-ai-wai-templates/contents/.github/actions/publish-package.py?ref=master" | python3 -
      runnerLabel:
        description: |
          additionnal label to select github runner
          - `memory` is default
          - `cicd` could be on premise (bcn) but with not enough free space for some build
        type: string
        default: "memory"
    secrets:
      COMMIT_KEY:
        required: true
      ORG_ECR_TOKEN_AI:
        required: true
      ORG_CARGO_REGISTRIES_WEFOX_TOKEN:
        required: false
      ORG_CORE_GITHUB_PAT:
        required: false
      ORG_CORE_NEXUS_NPM_WEFOX_URL:
        required: true
      ORG_CORE_NEXUS_NPM_TOKEN:
        required: true
      ORG_CORE_NEXUS_CI_USER:
        required: true
      ORG_CORE_NEXUS_CI_PWD:
        required: true
      ORG_DOCKERHUB_TOKEN:
        required: false
      ORG_DOCKERHUB_USER:
        required: false
      NEPTUNE_API_TOKEN:
        required: false
    outputs:
      image_tag:
        description: tag of the service's images (built & pushed)
        value: ${{ jobs._bake.outputs.image_tag }}

permissions:
  contents: read
  id-token: write

jobs:
  _bake:
    runs-on: [self-hosted, "${{ inputs.runnerLabel }}"]
    outputs:
      image_tag: ${{ steps.publish_package.outputs.image_tag }}
    container:
      image: ${{ inputs.DEVCONTAINER }}
      credentials:
        username: "AWS"
        password: ${{ secrets.ORG_ECR_TOKEN_AI }}
    steps:
      - uses: actions/checkout@v4
        # need to setup COMMIT_KEY (else no workflow will be triggered on commit/tag) with
        # ```sh
        # ssh-keygen -t ed25519 -f id_ed25519 -N "" -q -C ""
        # # can be done via WebUI
        # gh repo deploy-key add id_ed25519.pub -t "COMMIT_KEY" --allow-write
        # cat id_ed25519 | gh secret set "COMMIT_KEY" --app actions
        # rm id_ed25519.pub id_ed25519
        # ```
        with:
          ssh-key: "${{ secrets.COMMIT_KEY }}"
          fetch-depth: "0" # to be able to use `git describe`` and retrieve tags
          lfs: ${{ inputs.USE_LFS }}
      - shell: bash
        # HACK workaround for "fatal: detected dubious ownership in repository"
        # - https://github.com/actions/runner-images/issues/6775
        # - https://github.com/actions/checkout/issues/1169
        # If call as github workflow step, use `--system` when job is running on a container, else use `--global` (already done by github-action/checkout).
        # If call inside a Dockerfile, use `--system` and `*`, # Doing this hack on '*' as part of the Dokerfile used to run action or as container job is less risky than at the host level.
        # Alternatives:
        # - call `git config --global --add safe.directory "$GITHUB_WORKSPACE"` as part of the workflow (after checkout or before first use of git cli)
        # - call `git config --system --add safe.directory *` as part of Dockerfile
        # - using a more resent version of git (maybe a backport available for the current distribution) (in our case failed with git 2.39.2)
        #     ```
        #     echo "deb http://deb.debian.org/debian bullseye-backports main" >/etc/apt/sources.list.d/bullseye-backports.list
        #     apt-get update -y -qq
        #     apt-get install -y -qq git/bullseye-backports
        #     ```
        run: |
          git config --system --add safe.directory "$GITHUB_WORKSPACE"
      - name: AWS assume role build, push to ECR and EKS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: "${{ inputs.AWS_DEFAULT_REGION }}"
          role-duration-seconds: ${{ inputs.AWS_TOKEN_TTL }}
          role-session-name: assume_role_for_ecr_eks
      # use the less limited dockerhub account
      - name: DockerHub Login
        if: ${{ (env.ORG_DOCKERHUB_TOKEN != null) && (env.ORG_DOCKERHUB_USER != null) }}
        env:
          ORG_DOCKERHUB_TOKEN: ${{ secrets.ORG_DOCKERHUB_TOKEN }}
          ORG_DOCKERHUB_USER: ${{ secrets.ORG_DOCKERHUB_USER }}
        run: |
          echo "$ORG_DOCKERHUB_TOKEN" | docker login --username "$ORG_DOCKERHUB_USER" --password-stdin
      - name: "before: storage info"
        continue-on-error: true
        run: |
          set -ex
          df -h
          du -h . | sort -h | tail -10
          du -h "$HOME" | sort -h | tail -10
          docker images
          docker buildx du
      - name: "before: cleanup"
        continue-on-error: true
        run: |
          set -ex
          rm -rf "$HOME/bentoml" || true
          rm -rf "$HOME/.cache/pypoetry" || true
          rm -rf "$HOME/.cargo" || true
          du -h "$HOME" | sort -h | tail -10
      - name: Build, tag, and push image to Amazon ECR
        id: publish_package
        run: |
          set -euxo pipefail
          ${{ inputs.runCmd }}
        shell: bash
        env:
          APP_NAME: "${{ inputs.APP_NAME }}"
          APP_TARGET_VALUES: "${{ inputs.APP_TARGET_VALUES }}"
          APP_VERSION: "${{ inputs.APP_VERSION }}"
          GITHUB_TOKEN: "${{ secrets.ORG_CORE_GITHUB_PAT }}"
          NPM_REGISTRY_URL: "${{ secrets.ORG_CORE_NEXUS_NPM_WEFOX_URL }}"
          NPM_TOKEN: "${{ secrets.ORG_CORE_NEXUS_NPM_TOKEN }}"
          WEFOX_REGISTRY_USERNAME: "${{ secrets.ORG_CORE_NEXUS_CI_USER }}"
          WEFOX_REGISTRY_PASSWORD: "${{ secrets.ORG_CORE_NEXUS_CI_PWD }}"
          CARGO_REGISTRIES_WEFOX_TOKEN: "${{ secrets.ORG_CARGO_REGISTRIES_WEFOX_TOKEN }}"
          AWS_ACCOUNT_ID: "${{ inputs.AWS_ACCOUNT_ID }}"
          AWS_DEFAULT_REGION: "${{ inputs.AWS_DEFAULT_REGION }}"
          AWS_S3_CACHE_BUCKET: "${{ inputs.AWS_S3_CACHE_BUCKET }}"
          DEVCONTAINER_IMAGE: "${{ inputs.DEVCONTAINER }}"
          OCI_PUSH_OPTIONS: "${{ inputs.OCI_PUSH_OPTIONS }}"
      - name: "after: cleanup"
        if: always()
        continue-on-error: true
        run: |
          set -ex
          du -h "$HOME" | sort -h | tail -10
          rm -rf "$HOME/bentoml" || true
          rm -rf "$HOME/.cache/pypoetry" || true
      - name: "after: storage info"
        if: always()
        continue-on-error: true
        run: |
          set -ex
          df -h
          du -h . | sort -h | tail -10
          du -h "$HOME" | sort -h | tail -10
          docker images
          docker buildx du
      - name: Commit new image to use and request deploy to cluster/${{ inputs.EKS_CLUSTER_BASENAME }}-dev
        # see https://github.com/marketplace/actions/add-commit
        if: ${{ inputs.TAG_FOR_DEPLOY_TO_DEV }}
        uses: EndBug/add-and-commit@v9
        with:
          add: "-u"
          message: "ðŸ”– use image tag: ${{ steps.publish_package.outputs.image_tag }}"
          tag: "cluster/${{ inputs.EKS_CLUSTER_BASENAME }}-dev --force"
          tag_push: "--force"
      - name: Commit new image to use
        # see https://github.com/marketplace/actions/add-commit
        if: ${{ ! inputs.TAG_FOR_DEPLOY_TO_DEV }}
        uses: EndBug/add-and-commit@v9
        with:
          add: "-u"
          message: "ðŸ”– use image tag: ${{ steps.publish_package.outputs.image_tag }}"